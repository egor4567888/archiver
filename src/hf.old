if input.is_empty() {
        return vec![];
    }

    let mut idx = 0;

    // 1) Считываем original_len
    let original_len = read_u32(input, &mut idx) as usize;

    // 2) Считываем marker_len
    let marker_len = read_u16(input, &mut idx) as usize;

    // 3) Считываем биты маркера, если marker_len > 0
    let marker_bytes = (marker_len + 7) / 8;
    let marker_raw = read_bytes(input, &mut idx, marker_bytes);

    // При необходимости можно «распаковать» биты маркера:
    // let marker_bits = unpack_bits(marker_raw, marker_len);

    // 4) Читаем размер словаря (dict_len)
    let dict_len = read_u16(input, &mut idx) as usize;

    let mut freq_map = HashMap::new();
    for _ in 0..dict_len {
        let b = input[idx];
        idx += 1;
        let f = read_u32(input, &mut idx) as usize;
        freq_map.insert(b, f);
    }

    // 5) Читаем длину упакованных данных
    let data_len = read_u32(input, &mut idx) as usize;

    // 6) Извлекаем упакованные биты
    let packed = read_bytes(input, &mut idx, data_len);
    let root = build_huffman_tree(&freq_map);

    let mut bits = Vec::new();
    for &p in packed {
        for i in 0..8 {
            bits.push((p & (1 << (7 - i))) != 0);
        }
    }

    let mut node = &root;
    let mut decompressed = Vec::with_capacity(original_len);
    // Распаковываем, пока не достигнем исходной длины
    for bit in bits {
        if let Some(n) = node {
            node = if bit { &n.right } else { &n.left };
            if let Some(real_node) = node {
                if let Some(b) = real_node.byte {
                    decompressed.push(b);
                    node = &root;
                    if decompressed.len() == original_len {
                        break;
                    }
                }
            }
        }
    }
    decompressed